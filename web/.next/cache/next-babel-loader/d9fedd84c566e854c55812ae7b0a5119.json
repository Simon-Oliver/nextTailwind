{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/simon.stauffer/Desktop/Code/nextjs-test/pages/socket.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js'; // var pusher = new Pusher('app_key', {\n//     cluster: 'cluster',\n//     encrypted: true\n// })\n// const channel = pusher.subscribe('websocket-test')\n\nexport default function socket() {\n  const {\n    0: people,\n    1: setPeople\n  } = useState({\n    id: null,\n    people: []\n  });\n\n  const endConnection = () => {\n    this.pusher.disconnect();\n    axios.post(`http://localhost:8000/offline/${this.state.id}`);\n  };\n\n  useEffect(() => {\n    console.log(process.env.NEXT_PUBLIC_PUSHER_APP_KEY);\n    this.pusher = new Pusher(process.env.NEXT_PUBLIC_PUSHER_APP_KEY, {\n      cluster: process.env.NEXT_PUBLIC_PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    this.channel = this.pusher.subscribe('map-geofencing');\n    axios.get('http://localhost:8000/people').then(({\n      data\n    }) => {\n      const {\n        people = []\n      } = data;\n      setPeople({\n        people\n      });\n      window.onbeforeunload = this.endConnection; // Returned function in hook will be only run at end of lifecycle e.g willUnmount\n\n      return function cleanup() {\n        endConnection();\n      };\n    }, []);\n  });\n  console.log(people);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pusher test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/simon.stauffer/Desktop/Code/nextjs-test/pages/socket.js"],"names":["React","useEffect","useState","axios","Pusher","socket","people","setPeople","id","endConnection","pusher","disconnect","post","state","console","log","process","env","NEXT_PUBLIC_PUSHER_APP_KEY","cluster","NEXT_PUBLIC_PUSHER_APP_CLUSTER","encrypted","channel","subscribe","get","then","data","window","onbeforeunload","cleanup"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CAGA;AACA;AACA;AACA;AACA;;AAGA,eAAe,SAASC,MAAT,GAAkB;AAC7B,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBL,QAAQ,CAAC;AAAEM,IAAAA,EAAE,EAAE,IAAN;AAAYF,IAAAA,MAAM,EAAE;AAApB,GAAD,CAApC;;AAEA,QAAMG,aAAa,GAAG,MAAM;AACxB,SAAKC,MAAL,CAAYC,UAAZ;AACAR,IAAAA,KAAK,CAACS,IAAN,CAAY,iCAAgC,KAAKC,KAAL,CAAWL,EAAG,EAA1D;AACD,GAHH;;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,0BAAxB;AACA,SAAKR,MAAL,GAAc,IAAIN,MAAJ,CAAWY,OAAO,CAACC,GAAR,CAAYC,0BAAvB,EAAmD;AAC7DC,MAAAA,OAAO,EAAEH,OAAO,CAACC,GAAR,CAAYG,8BADwC;AAE7DC,MAAAA,SAAS,EAAE;AAFkD,KAAnD,CAAd;AAKA,SAAKC,OAAL,GAAe,KAAKZ,MAAL,CAAYa,SAAZ,CAAsB,gBAAtB,CAAf;AAGApB,IAAAA,KAAK,CAACqB,GAAN,CAAU,8BAAV,EAA0CC,IAA1C,CAA+C,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACzD,YAAM;AAAEpB,QAAAA,MAAM,GAAG;AAAX,UAAkBoB,IAAxB;AACAnB,MAAAA,SAAS,CAAC;AAAED,QAAAA;AAAF,OAAD,CAAT;AAEAqB,MAAAA,MAAM,CAACC,cAAP,GAAwB,KAAKnB,aAA7B,CAJyD,CAMzD;;AACA,aAAO,SAASoB,OAAT,GAAmB;AACtBpB,QAAAA,aAAa;AAChB,OAFD;AAGH,KAVD,EAUG,EAVH;AAWH,GArBQ,CAAT;AAuBAK,EAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AAEA,sBACI;AAAA,2BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport Pusher from 'pusher-js'\n\n\n// var pusher = new Pusher('app_key', {\n//     cluster: 'cluster',\n//     encrypted: true\n// })\n// const channel = pusher.subscribe('websocket-test')\n\n\nexport default function socket() {\n    const [people, setPeople] = useState({ id: null, people: [] });\n\n    const endConnection = () => {\n        this.pusher.disconnect();\n        axios.post(`http://localhost:8000/offline/${this.state.id}`);\n      }\n\n    useEffect(() => {\n        console.log(process.env.NEXT_PUBLIC_PUSHER_APP_KEY)\n        this.pusher = new Pusher(process.env.NEXT_PUBLIC_PUSHER_APP_KEY, {\n            cluster: process.env.NEXT_PUBLIC_PUSHER_APP_CLUSTER,\n            encrypted: true\n        });\n\n        this.channel = this.pusher.subscribe('map-geofencing');\n\n\n        axios.get('http://localhost:8000/people').then(({ data }) => {\n            const { people = [] } = data;\n            setPeople({ people });\n\n            window.onbeforeunload = this.endConnection;\n\n            // Returned function in hook will be only run at end of lifecycle e.g willUnmount\n            return function cleanup() {\n                endConnection();\n            }\n        }, []);\n    })\n\n    console.log(people)\n\n    return(\n        <div>\n            <h1>Pusher test</h1>\n        </div>\n    )\n\n\n\n}"]},"metadata":{},"sourceType":"module"}