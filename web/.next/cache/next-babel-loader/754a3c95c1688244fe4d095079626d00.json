{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/simon.stauffer/Desktop/Code/nextjs-test/pages/socket.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nvar pusher = new Pusher('app_key', {\n  cluster: 'cluster',\n  encrypted: true\n});\nvar channel = pusher.subscribe('websocket-test');\nexport default function socket() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState({\n    id: null,\n    people: []\n  }),\n      people = _useState[0],\n      setPeople = _useState[1];\n\n  var endConnection = function endConnection() {\n    _this.pusher.disconnect();\n\n    axios.post(\"/offline/\".concat(_this.state.id));\n  };\n\n  useEffect(function () {\n    _this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    _this.channel = _this.pusher.subscribe('map-geofencing');\n    axios.get('/people').then(function (_ref) {\n      var data = _ref.data;\n      var _data$people = data.people,\n          people = _data$people === void 0 ? [] : _data$people;\n      setPeople({\n        people: people\n      });\n      window.onbeforeunload = _this.endConnection; // Returned function in hook will be only run at end of lifecycle e.g willUnmount\n\n      return function cleanup() {\n        endConnection();\n      };\n    }, []);\n  });\n  console.log(people);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pusher test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(socket, \"mGZNSmTqeVWy4s/EpPBs2IAIR50=\");","map":{"version":3,"sources":["/Users/simon.stauffer/Desktop/Code/nextjs-test/pages/socket.js"],"names":["React","useEffect","useState","axios","Pusher","pusher","cluster","encrypted","channel","subscribe","socket","id","people","setPeople","endConnection","disconnect","post","state","process","env","PUSHER_APP_KEY","PUSHER_APP_CLUSTER","get","then","data","window","onbeforeunload","cleanup","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAGA,IAAIC,MAAM,GAAG,IAAID,MAAJ,CAAW,SAAX,EAAsB;AAC/BE,EAAAA,OAAO,EAAE,SADsB;AAE/BC,EAAAA,SAAS,EAAE;AAFoB,CAAtB,CAAb;AAIA,IAAMC,OAAO,GAAGH,MAAM,CAACI,SAAP,CAAiB,gBAAjB,CAAhB;AAGA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAAA;;AAAA,kBACDR,QAAQ,CAAC;AAAES,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,MAAM,EAAE;AAApB,GAAD,CADP;AAAA,MACtBA,MADsB;AAAA,MACdC,SADc;;AAG7B,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB,IAAA,KAAI,CAACT,MAAL,CAAYU,UAAZ;;AACAZ,IAAAA,KAAK,CAACa,IAAN,oBAAuB,KAAI,CAACC,KAAL,CAAWN,EAAlC;AACD,GAHH;;AAKAV,EAAAA,SAAS,CAAC,YAAM;AACZ,IAAA,KAAI,CAACI,MAAL,GAAc,IAAID,MAAJ,CAAWc,OAAO,CAACC,GAAR,CAAYC,cAAvB,EAAuC;AACjDd,MAAAA,OAAO,EAAEY,OAAO,CAACC,GAAR,CAAYE,kBAD4B;AAEjDd,MAAAA,SAAS,EAAE;AAFsC,KAAvC,CAAd;AAKA,IAAA,KAAI,CAACC,OAAL,GAAe,KAAI,CAACH,MAAL,CAAYI,SAAZ,CAAsB,gBAAtB,CAAf;AAGAN,IAAAA,KAAK,CAACmB,GAAN,CAAU,SAAV,EAAqBC,IAArB,CAA0B,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AAAA,yBACZA,IADY,CAC5BZ,MAD4B;AAAA,UAC5BA,MAD4B,6BACnB,EADmB;AAEpCC,MAAAA,SAAS,CAAC;AAAED,QAAAA,MAAM,EAANA;AAAF,OAAD,CAAT;AAEAa,MAAAA,MAAM,CAACC,cAAP,GAAwB,KAAI,CAACZ,aAA7B,CAJoC,CAMpC;;AACA,aAAO,SAASa,OAAT,GAAmB;AACtBb,QAAAA,aAAa;AAChB,OAFD;AAGH,KAVD,EAUG,EAVH;AAWH,GApBQ,CAAT;AAsBAc,EAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;AAEA,sBACI;AAAA,2BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAxCuBF,M","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport Pusher from 'pusher-js'\n\n\nvar pusher = new Pusher('app_key', {\n    cluster: 'cluster',\n    encrypted: true\n})\nconst channel = pusher.subscribe('websocket-test')\n\n\nexport default function socket() {\n    const [people, setPeople] = useState({ id: null, people: [] });\n\n    const endConnection = () => {\n        this.pusher.disconnect();\n        axios.post(`/offline/${this.state.id}`);\n      }\n\n    useEffect(() => {\n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n            cluster: process.env.PUSHER_APP_CLUSTER,\n            encrypted: true\n        });\n\n        this.channel = this.pusher.subscribe('map-geofencing');\n\n\n        axios.get('/people').then(({ data }) => {\n            const { people = [] } = data;\n            setPeople({ people });\n\n            window.onbeforeunload = this.endConnection;\n\n            // Returned function in hook will be only run at end of lifecycle e.g willUnmount\n            return function cleanup() {\n                endConnection();\n            }\n        }, []);\n    })\n\n    console.log(people)\n\n    return(\n        <div>\n            <h1>Pusher test</h1>\n        </div>\n    )\n\n\n\n}"]},"metadata":{},"sourceType":"module"}