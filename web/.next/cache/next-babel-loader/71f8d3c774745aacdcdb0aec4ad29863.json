{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/simon.stauffer/Desktop/Code/nextjs-test/pages/socket.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nvar pusher = new Pusher('app_key', {\n  cluster: 'cluster',\n  encrypted: true\n});\nconst channel = pusher.subscribe('websocket-test');\nexport default function socket() {\n  const {\n    0: people,\n    1: setPeople\n  } = useState({\n    id: null,\n    people: []\n  });\n\n  endConnection = () => {\n    this.pusher.disconnect();\n    axios.post(`/offline/${this.state.id}`);\n  };\n\n  useEffect(() => {\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    this.channel = this.pusher.subscribe('map-geofencing');\n    axios.get('/people').then(({\n      data\n    }) => {\n      const {\n        people = []\n      } = data;\n      setPeople({\n        people\n      });\n      window.onbeforeunload = this.endConnection; // Returned function in hook will be only run at end of lifecycle e.g willUnmount\n\n      return function cleanup() {\n        this.endConnection();\n      };\n    }, []);\n  });\n  console.log(people);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pusher test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/simon.stauffer/Desktop/Code/nextjs-test/pages/socket.js"],"names":["React","useEffect","useState","axios","Pusher","pusher","cluster","encrypted","channel","subscribe","socket","people","setPeople","id","endConnection","disconnect","post","state","process","env","PUSHER_APP_KEY","PUSHER_APP_CLUSTER","get","then","data","window","onbeforeunload","cleanup","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAGA,IAAIC,MAAM,GAAG,IAAID,MAAJ,CAAW,SAAX,EAAsB;AAC/BE,EAAAA,OAAO,EAAE,SADsB;AAE/BC,EAAAA,SAAS,EAAE;AAFoB,CAAtB,CAAb;AAIA,MAAMC,OAAO,GAAGH,MAAM,CAACI,SAAP,CAAiB,gBAAjB,CAAhB;AAGA,eAAe,SAASC,MAAT,GAAkB;AAC7B,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBV,QAAQ,CAAC;AAAEW,IAAAA,EAAE,EAAE,IAAN;AAAYF,IAAAA,MAAM,EAAE;AAApB,GAAD,CAApC;;AAEAG,EAAAA,aAAa,GAAG,MAAM;AAClB,SAAKT,MAAL,CAAYU,UAAZ;AACAZ,IAAAA,KAAK,CAACa,IAAN,CAAY,YAAW,KAAKC,KAAL,CAAWJ,EAAG,EAArC;AACD,GAHH;;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,SAAKI,MAAL,GAAc,IAAID,MAAJ,CAAWc,OAAO,CAACC,GAAR,CAAYC,cAAvB,EAAuC;AACjDd,MAAAA,OAAO,EAAEY,OAAO,CAACC,GAAR,CAAYE,kBAD4B;AAEjDd,MAAAA,SAAS,EAAE;AAFsC,KAAvC,CAAd;AAKA,SAAKC,OAAL,GAAe,KAAKH,MAAL,CAAYI,SAAZ,CAAsB,gBAAtB,CAAf;AAGAN,IAAAA,KAAK,CAACmB,GAAN,CAAU,SAAV,EAAqBC,IAArB,CAA0B,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACpC,YAAM;AAAEb,QAAAA,MAAM,GAAG;AAAX,UAAkBa,IAAxB;AACAZ,MAAAA,SAAS,CAAC;AAAED,QAAAA;AAAF,OAAD,CAAT;AAEAc,MAAAA,MAAM,CAACC,cAAP,GAAwB,KAAKZ,aAA7B,CAJoC,CAMpC;;AACA,aAAO,SAASa,OAAT,GAAmB;AACtB,aAAKb,aAAL;AACH,OAFD;AAGH,KAVD,EAUG,EAVH;AAWH,GApBQ,CAAT;AAsBAc,EAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAZ;AAEA,sBACI;AAAA,2BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport Pusher from 'pusher-js'\n\n\nvar pusher = new Pusher('app_key', {\n    cluster: 'cluster',\n    encrypted: true\n})\nconst channel = pusher.subscribe('websocket-test')\n\n\nexport default function socket() {\n    const [people, setPeople] = useState({ id: null, people: [] });\n\n    endConnection = () => {\n        this.pusher.disconnect();\n        axios.post(`/offline/${this.state.id}`);\n      }\n\n    useEffect(() => {\n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n            cluster: process.env.PUSHER_APP_CLUSTER,\n            encrypted: true\n        });\n\n        this.channel = this.pusher.subscribe('map-geofencing');\n\n\n        axios.get('/people').then(({ data }) => {\n            const { people = [] } = data;\n            setPeople({ people });\n\n            window.onbeforeunload = this.endConnection;\n\n            // Returned function in hook will be only run at end of lifecycle e.g willUnmount\n            return function cleanup() {\n                this.endConnection();\n            }\n        }, []);\n    })\n\n    console.log(people)\n\n    return(\n        <div>\n            <h1>Pusher test</h1>\n        </div>\n    )\n\n\n\n}"]},"metadata":{},"sourceType":"module"}