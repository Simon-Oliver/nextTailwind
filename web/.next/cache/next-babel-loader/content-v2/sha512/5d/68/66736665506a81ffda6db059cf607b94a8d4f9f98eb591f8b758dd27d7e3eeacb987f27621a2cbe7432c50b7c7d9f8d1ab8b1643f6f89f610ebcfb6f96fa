{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/simon.stauffer/Desktop/Code/nextjs-test/web/pages/post/[slug].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from 'next/router';\nimport client from '../../client.js';\nimport BlockContent from '@sanity/block-content-to-react';\nimport groq from 'groq';\nimport styles from '../css.module.css';\nimport imageUrlBuilder from '@sanity/image-url';\nimport React, { useEffect } from 'react';\n\nconst Post = props => {\n  const router = useRouter();\n  useEffect(() => {\n    console.log(props);\n  }, []);\n  const overrides = {\n    date: props => /*#__PURE__*/_jsxDEV(\"p\", _objectSpread({\n      className: styles.date\n    }, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 24\n    }, this),\n    h2: props => /*#__PURE__*/_jsxDEV(\"h2\", _objectSpread({\n      className: styles.subheading1\n    }, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 22\n    }, this),\n    h3: props => /*#__PURE__*/_jsxDEV(\"h3\", _objectSpread({\n      className: styles.subheading2\n    }, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 22\n    }, this)\n  };\n  const serializers = {\n    listItem: props => props.node.listItem == \"number\" ? /*#__PURE__*/_jsxDEV(\"li\", _objectSpread({\n      className: styles.number\n    }, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 62\n    }, this) : /*#__PURE__*/_jsxDEV(\"li\", _objectSpread({\n      className: styles.bullet\n    }, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 108\n    }, this),\n    types: {\n      block: props => // Check if we have an override for the “style”\n      overrides[props.node.style] // if so, call the function and pass in the children, ignoring\n      // the other unnecessary props\n      ? overrides[props.node.style]({\n        children: props.children\n      }) // otherwise, fallback to the provided default with all props\n      : BlockContent.defaultSerializers.types.block(props)\n    }\n  };\n\n  const image = /*#__PURE__*/_jsxDEV(\"img\", {\n    width: 2000,\n    height: 1000,\n    alt: `Cover Image for ${title}`,\n    className: cn('shadow-small', {\n      'hover:shadow-medium transition-shadow duration-200': slug\n    }),\n    src: imageBuilder.image(url).height(1000).width(2000).url()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.blogContainer,\n    children: /*#__PURE__*/_jsxDEV(\"article\", {\n      className: styles.article,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: styles.title,\n        children: props.title.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BlockContent, _objectSpread({\n        blocks: props.body,\n        imageOptions: {\n          w: 2000,\n          h: 850,\n          fit: 'crop'\n        },\n        serializers: serializers\n      }, client.config()), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n    title,\n    \"name\": author->name,\n    \"categories\": categories[]->title,\n    body\n  }`;\n\nPost.getInitialProps = async ctx => {\n  const {\n    slug = \"\"\n  } = ctx.query;\n  return await client.fetch(query, {\n    slug\n  });\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/simon.stauffer/Desktop/Code/nextjs-test/web/pages/post/[slug].js"],"names":["useRouter","client","BlockContent","groq","styles","imageUrlBuilder","React","useEffect","Post","props","router","console","log","overrides","date","h2","subheading1","h3","subheading2","serializers","listItem","node","number","bullet","types","block","style","children","defaultSerializers","image","title","cn","slug","imageBuilder","url","height","width","blogContainer","article","toUpperCase","body","w","h","fit","config","query","getInitialProps","ctx","fetch"],"mappings":"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","sourcesContent":["import { useRouter } from 'next/router';\nimport client from '../../client.js'\nimport BlockContent from '@sanity/block-content-to-react'\nimport groq from 'groq'\nimport styles from '../css.module.css';\nimport imageUrlBuilder from '@sanity/image-url'\n\nimport React, { useEffect } from 'react'\n\nconst Post = (props) => {\n    const router = useRouter()\n    useEffect(() => {\n        console.log(props)\n    }, [])\n\n    const overrides = {\n        date: props => <p className={styles.date} {...props} />,\n        h2: props => <h2 className={styles.subheading1} {...props} />,\n        h3: props => <h3 className={styles.subheading2} {...props} />,\n    }\n\n    const serializers = {\n        listItem: props => props.node.listItem == \"number\" ? <li className={styles.number} {...props} /> : <li className={styles.bullet} {...props} />,\n\n        types: {\n            block: props =>\n                // Check if we have an override for the “style”\n                overrides[props.node.style]\n                    // if so, call the function and pass in the children, ignoring\n                    // the other unnecessary props\n                    ? overrides[props.node.style]({ children: props.children })\n\n                    // otherwise, fallback to the provided default with all props\n                    : BlockContent.defaultSerializers.types.block(props),\n        }\n    }\n\n    const image = (\n        <img\n            width={2000}\n            height={1000}\n            alt={`Cover Image for ${title}`}\n            className={cn('shadow-small', {\n                'hover:shadow-medium transition-shadow duration-200': slug,\n            })}\n            src={imageBuilder.image(url).height(1000).width(2000).url()}\n        />\n    )\n\n    return (\n        <div className={styles.blogContainer}>\n            <article className={styles.article} >\n                <h1 className={styles.title}>{props.title.toUpperCase()}</h1>\n                <BlockContent\n                    blocks={props.body}\n                    imageOptions={{ w: 2000, h: 850, fit: 'crop' }}\n                    serializers={serializers}\n                    {...client.config()}\n                />\n            </article>\n        </div>\n    )\n}\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n    title,\n    \"name\": author->name,\n    \"categories\": categories[]->title,\n    body\n  }`\n\nPost.getInitialProps = async (ctx) => {\n    const { slug = \"\" } = ctx.query\n    return await client.fetch(query, { slug })\n}\n\nexport default Post"]},"metadata":{},"sourceType":"module"}