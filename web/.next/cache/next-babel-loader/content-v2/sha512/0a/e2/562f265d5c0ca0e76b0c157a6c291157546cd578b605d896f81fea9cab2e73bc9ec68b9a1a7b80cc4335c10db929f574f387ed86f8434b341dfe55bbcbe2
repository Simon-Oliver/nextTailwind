{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/simon.stauffer/Desktop/Code/nextjs-test/web/pages/post/[slug].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"post\\\" && slug.current == $slug][0]\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport client from '../../client.js';\nimport BlockContent from '@sanity/block-content-to-react';\nimport groq from 'groq';\nimport styles from '../css.module.css';\nimport moment from \"moment\";\nimport imageUrlBuilder from '@sanity/image-url'; // Get a pre-configured url-builder from your sanity client\n\nvar builder = imageUrlBuilder(client);\n\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nvar Post = function Post(props) {\n  _s();\n\n  var _useState = useState(\"\"),\n      imgUrl = _useState[0],\n      setImgUrl = _useState[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    console.log(props);\n  }, []);\n  useEffect(function () {\n    var imgBuilder = imageUrlBuilder({\n      projectId: \"6btzanu1\",\n      dataset: 'production'\n    });\n    setImgUrl(imgBuilder.image(props.mainImage).width(2000).height(800));\n  }, [props.mainImage]);\n  var overrides = {\n    date: function date(props) {\n      return /*#__PURE__*/_jsxDEV(\"p\", _objectSpread({\n        className: styles.date\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 24\n      }, _this);\n    },\n    h2: function h2(props) {\n      return /*#__PURE__*/_jsxDEV(\"h2\", _objectSpread({\n        className: styles.subheading1\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 22\n      }, _this);\n    },\n    h3: function h3(props) {\n      return /*#__PURE__*/_jsxDEV(\"h3\", _objectSpread({\n        className: styles.subheading2\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 22\n      }, _this);\n    },\n    image: function image(props) {\n      return /*#__PURE__*/_jsxDEV(\"img\", _objectSpread({\n        className: styles.imgPosts\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }, _this);\n    }\n  };\n  var serializers = {\n    listItem: function listItem(props) {\n      return props.node.listItem == \"number\" ? /*#__PURE__*/_jsxDEV(\"li\", _objectSpread({\n        className: styles.number\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 62\n      }, _this) : /*#__PURE__*/_jsxDEV(\"li\", _objectSpread({\n        className: styles.bullet\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 108\n      }, _this);\n    },\n    types: {\n      block: function block(props) {\n        return (// Check if we have an override for the “style”\n          overrides[props.node.style] // if so, call the function and pass in the children, ignoring\n          // the other unnecessary props\n          ? overrides[props.node.style]({\n            children: props.children\n          }) // otherwise, fallback to the provided default with all props\n          : BlockContent.defaultSerializers.types.block(props)\n        );\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.blogContainer,\n    children: /*#__PURE__*/_jsxDEV(\"article\", {\n      className: styles.article,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: styles.title,\n        children: props.title.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, _this), imgUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: styles.mainImage,\n        src: imgUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 28\n      }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.date,\n        children: moment(props.publishedAt).format(\"MMMM DD, yyyy\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(BlockContent, _objectSpread({\n        blocks: props.body,\n        imageOptions: {\n          w: 500,\n          h: 500,\n          fit: 'crop'\n        },\n        serializers: serializers\n      }, client.config()), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Post, \"EYRN5dWEY1Pw7d0jgdC2ct7zoaA=\", false, function () {\n  return [useRouter];\n});\n\n_c = Post;\nvar query = groq(_templateObject());\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var _ctx$query$slug, slug;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ctx$query$slug = ctx.query.slug, slug = _ctx$query$slug === void 0 ? \"\" : _ctx$query$slug;\n            _context.next = 3;\n            return client.fetch(query, {\n              slug: slug\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/simon.stauffer/Desktop/Code/nextjs-test/web/pages/post/[slug].js"],"names":["React","useEffect","useState","useRouter","client","BlockContent","groq","styles","moment","imageUrlBuilder","builder","urlFor","source","image","Post","props","imgUrl","setImgUrl","router","console","log","imgBuilder","projectId","dataset","mainImage","width","height","overrides","date","h2","subheading1","h3","subheading2","imgPosts","serializers","listItem","node","number","bullet","types","block","style","children","defaultSerializers","blogContainer","article","title","toUpperCase","publishedAt","format","body","w","h","fit","config","query","getInitialProps","ctx","slug","fetch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router';\nimport client from '../../client.js'\nimport BlockContent from '@sanity/block-content-to-react'\nimport groq from 'groq'\nimport styles from '../css.module.css';\nimport moment from \"moment\"\n\nimport imageUrlBuilder from '@sanity/image-url'\n\n// Get a pre-configured url-builder from your sanity client\nconst builder = imageUrlBuilder(client)\n\nfunction urlFor(source) {\n    return builder.image(source)\n}\n\n\n\nconst Post = (props) => {\n    const [imgUrl, setImgUrl] = useState(\"\")\n\n    const router = useRouter()\n    useEffect(() => {\n        console.log(props)\n    }, [])\n\n    useEffect(() => {\n        const imgBuilder = imageUrlBuilder({\n            projectId: \"6btzanu1\",\n            dataset: 'production',\n        })\n        setImgUrl(imgBuilder.image(props.mainImage).width(2000).height(800))\n\n    }, [props.mainImage])\n\n\n\n    const overrides = {\n        date: props => <p className={styles.date} {...props} />,\n        h2: props => <h2 className={styles.subheading1} {...props} />,\n        h3: props => <h3 className={styles.subheading2} {...props} />,\n        image: props => <img className={styles.imgPosts} {...props} />,\n    }\n\n    const serializers = {\n        listItem: props => props.node.listItem == \"number\" ? <li className={styles.number} {...props} /> : <li className={styles.bullet} {...props} />,\n\n        types: {\n            block: props =>\n                // Check if we have an override for the “style”\n                overrides[props.node.style]\n                    // if so, call the function and pass in the children, ignoring\n                    // the other unnecessary props\n                    ? overrides[props.node.style]({ children: props.children })\n\n                    // otherwise, fallback to the provided default with all props\n                    : BlockContent.defaultSerializers.types.block(props),\n        }\n    }\n\n\n\n    return (\n        <div className={styles.blogContainer}>\n            <article className={styles.article} >\n                <h1 className={styles.title}>{props.title.toUpperCase()}</h1>\n                {imgUrl && <img className={styles.mainImage} src={imgUrl} />}\n                <p className={styles.date}>{moment(props.publishedAt).format(\"MMMM DD, yyyy\")}</p>\n                <BlockContent\n                    blocks={props.body}\n                    imageOptions={{ w: 500, h: 500, fit: 'crop' }}\n                    serializers={serializers}\n                    {...client.config()}\n                />\n            </article>\n        </div>\n    )\n}\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]`\n\nPost.getInitialProps = async (ctx) => {\n    const { slug = \"\" } = ctx.query\n    return await client.fetch(query, { slug })\n}\n\nexport default Post"]},"metadata":{},"sourceType":"module"}