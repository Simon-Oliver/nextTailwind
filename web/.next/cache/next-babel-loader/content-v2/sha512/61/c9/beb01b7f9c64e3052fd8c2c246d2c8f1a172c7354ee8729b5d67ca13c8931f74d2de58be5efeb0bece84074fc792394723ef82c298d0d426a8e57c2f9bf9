{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/simon.stauffer/Desktop/Code/nextjs-test/web/pages/post/[slug].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from 'next/router';\nimport client from '../../client.js';\nimport BlockContent from '@sanity/block-content-to-react';\nimport groq from 'groq';\nimport React, { useEffect } from 'react';\n\nconst Post = props => {\n  const router = useRouter();\n  useEffect(() => {\n    console.log(props);\n  }, []);\n  const serializers = {\n    types: {\n      block: props => // Check if we have an override for the “style”\n      overrides[props.node.style] // if so, call the function and pass in the children, ignoring\n      // the other unnecessary props\n      ? overrides[props.node.style]({\n        children: props.children\n      }) // otherwise, fallback to the provided default with all props\n      : BlockContent.defaultSerializers.types.block(props)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BlockContent, _objectSpread({\n      blocks: props.body,\n      imageOptions: {\n        w: 320,\n        h: 240,\n        fit: 'max'\n      },\n      serializers: {\n        marks: {\n          date\n        }\n      }\n    }, client.config()), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n    title,\n    \"name\": author->name,\n    \"categories\": categories[]->title,\n    body\n  }`;\n\nPost.getInitialProps = async ctx => {\n  const {\n    slug = \"\"\n  } = ctx.query;\n  return await client.fetch(query, {\n    slug\n  });\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/simon.stauffer/Desktop/Code/nextjs-test/web/pages/post/[slug].js"],"names":["useRouter","client","BlockContent","groq","React","useEffect","Post","props","router","console","log","serializers","types","block","overrides","node","style","children","defaultSerializers","title","body","w","h","fit","marks","date","config","query","getInitialProps","ctx","slug","fetch"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACpB,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACAK,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMI,WAAW,GAAG;AAChBC,IAAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAEN,KAAK,IACR;AACAO,MAAAA,SAAS,CAACP,KAAK,CAACQ,IAAN,CAAWC,KAAZ,CAAT,CACI;AACA;AAFJ,QAGMF,SAAS,CAACP,KAAK,CAACQ,IAAN,CAAWC,KAAZ,CAAT,CAA4B;AAAEC,QAAAA,QAAQ,EAAEV,KAAK,CAACU;AAAlB,OAA5B,CAHN,CAKI;AALJ,QAMMf,YAAY,CAACgB,kBAAb,CAAgCN,KAAhC,CAAsCC,KAAtC,CAA4CN,KAA5C;AATP;AADS,GAApB;AAcA,sBACI;AAAA,4BACI;AAAA,gBAAKA,KAAK,CAACY;AAAX;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,YAAD;AACI,MAAA,MAAM,EAAEZ,KAAK,CAACa,IADlB;AAEI,MAAA,YAAY,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,GAAb;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAFlB;AAGI,MAAA,WAAW,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAEC,UAAAA;AAAF;AAAT;AAHjB,OAIQxB,MAAM,CAACyB,MAAP,EAJR;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA/BD;;AAiCA,MAAMC,KAAK,GAAGxB,IAAK;AACnB;AACA;AACA;AACA;AACA,IALA;;AAOAG,IAAI,CAACsB,eAAL,GAAuB,MAAOC,GAAP,IAAe;AAClC,QAAM;AAAEC,IAAAA,IAAI,GAAG;AAAT,MAAgBD,GAAG,CAACF,KAA1B;AACA,SAAO,MAAM1B,MAAM,CAAC8B,KAAP,CAAaJ,KAAb,EAAoB;AAAEG,IAAAA;AAAF,GAApB,CAAb;AACH,CAHD;;AAKA,eAAexB,IAAf","sourcesContent":["import { useRouter } from 'next/router';\nimport client from '../../client.js'\nimport BlockContent from '@sanity/block-content-to-react'\nimport groq from 'groq'\n\nimport React, { useEffect } from 'react'\n\nconst Post = (props) => {\n    const router = useRouter()\n    useEffect(() => {\n        console.log(props)\n    }, [])\n\n    const serializers = {\n        types: {\n            block: props =>\n                // Check if we have an override for the “style”\n                overrides[props.node.style]\n                    // if so, call the function and pass in the children, ignoring\n                    // the other unnecessary props\n                    ? overrides[props.node.style]({ children: props.children })\n\n                    // otherwise, fallback to the provided default with all props\n                    : BlockContent.defaultSerializers.types.block(props),\n        }\n    }\n\n    return (\n        <article>\n            <h1>{props.title}</h1>\n            <BlockContent\n                blocks={props.body}\n                imageOptions={{ w: 320, h: 240, fit: 'max' }}\n                serializers={{ marks: { date } }}\n                {...client.config()}\n            />\n        </article>\n    )\n}\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n    title,\n    \"name\": author->name,\n    \"categories\": categories[]->title,\n    body\n  }`\n\nPost.getInitialProps = async (ctx) => {\n    const { slug = \"\" } = ctx.query\n    return await client.fetch(query, { slug })\n}\n\nexport default Post"]},"metadata":{},"sourceType":"module"}